<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Troubleshooting Setup" id="troubleshooting-setup">

    <p>
        Common issues and solutions when setting up the development environment for the 16 games collection.
    </p>

    <chapter title="SFML Installation Issues" id="sfml-issues">
        
        <chapter title="Library Not Found" id="library-not-found">
            <deflist>
                <def title="Problem">
                    <p>Error: <code>cannot find -lsfml-graphics</code> or similar library errors</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Verify SFML installation:</p>
                            <code-block lang="bash">
                                # Linux/macOS
                                pkg-config --libs sfml-all
                                
                                # Check if libraries exist
                                find /usr -name "*sfml*" 2>/dev/null
                                ldconfig -p | grep sfml
                            </code-block>
                        </step>
                        <step>
                            <p>Update library cache (Linux):</p>
                            <code-block lang="bash">
                                sudo ldconfig
                            </code-block>
                        </step>
                        <step>
                            <p>Add library path manually:</p>
                            <code-block lang="bash">
                                # Compile with explicit library path
                                g++ -L/usr/local/lib -o game main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Header Files Not Found" id="headers-not-found">
            <deflist>
                <def title="Problem">
                    <p>Error: <code>SFML/Graphics.hpp: No such file or directory</code></p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Check if development headers are installed:</p>
                            <code-block lang="bash">
                                # Ubuntu/Debian
                                dpkg -l | grep libsfml-dev
                                
                                # Fedora
                                rpm -qa | grep SFML-devel
                                
                                # Find header files
                                find /usr -name "Graphics.hpp" 2>/dev/null
                            </code-block>
                        </step>
                        <step>
                            <p>Install development packages:</p>
                            <code-block lang="bash">
                                # Ubuntu/Debian
                                sudo apt install libsfml-dev
                                
                                # Fedora
                                sudo dnf install SFML-devel
                            </code-block>
                        </step>
                        <step>
                            <p>Add include path manually:</p>
                            <code-block lang="bash">
                                g++ -I/usr/include -o game main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Version Compatibility" id="version-compatibility">
            <deflist>
                <def title="Problem">
                    <p>Compilation errors due to SFML version mismatch</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Check SFML version:</p>
                            <code-block lang="bash">
                                pkg-config --modversion sfml-all
                                
                                # Or check in code
                                echo '#include &lt;SFML/Config.hpp&gt;' > version.cpp
                                echo '#include &lt;iostream&gt;' >> version.cpp
                                echo 'int main() { std::cout &lt;&lt; SFML_VERSION_MAJOR &lt;&lt; "." &lt;&lt; SFML_VERSION_MINOR &lt;&lt; std::endl; }' >> version.cpp
                                g++ version.cpp -o version && ./version
                            </code-block>
                        </step>
                        <step>
                            <p>Ensure SFML 2.5+ is installed</p>
                        </step>
                        <step>
                            <p>Update SFML if needed:</p>
                            <code-block lang="bash">
                                # Ubuntu/Debian
                                sudo apt update && sudo apt upgrade libsfml-dev
                                
                                # macOS
                                brew upgrade sfml
                            </code-block>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
    </chapter>

    <chapter title="Compilation Issues" id="compilation-issues">
        
        <chapter title="C++ Standard Issues" id="cpp-standard">
            <deflist>
                <def title="Problem">
                    <p>Errors related to C++ features not being available</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Specify C++ standard explicitly:</p>
                            <code-block lang="bash">
                                g++ -std=c++17 -o game main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </step>
                        <step>
                            <p>Check compiler version:</p>
                            <code-block lang="bash">
                                g++ --version
                                clang --version
                            </code-block>
                        </step>
                        <step>
                            <p>Update compiler if needed</p>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Linking Errors" id="linking-errors">
            <deflist>
                <def title="Problem">
                    <p>Undefined reference errors during linking</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Ensure correct library order:</p>
                            <code-block lang="bash">
                                # Correct order: most dependent first
                                g++ -o game main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </step>
                        <step>
                            <p>Add audio library if needed:</p>
                            <code-block lang="bash">
                                g++ -o game main.cpp -lsfml-graphics -lsfml-audio -lsfml-window -lsfml-system
                            </code-block>
                        </step>
                        <step>
                            <p>Check for missing dependencies:</p>
                            <code-block lang="bash">
                                ldd /usr/lib/libsfml-graphics.so
                            </code-block>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
    </chapter>

    <chapter title="Runtime Issues" id="runtime-issues">
        
        <chapter title="Shared Library Errors" id="shared-library">
            <deflist>
                <def title="Problem">
                    <p>Error: <code>error while loading shared libraries: libsfml-graphics.so.2.5</code></p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Update library cache:</p>
                            <code-block lang="bash">
                                sudo ldconfig
                            </code-block>
                        </step>
                        <step>
                            <p>Add library path to LD_LIBRARY_PATH:</p>
                            <code-block lang="bash">
                                export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
                                
                                # Make permanent by adding to ~/.bashrc
                                echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc
                            </code-block>
                        </step>
                        <step>
                            <p>Check library locations:</p>
                            <code-block lang="bash">
                                ldd ./game
                                find /usr -name "libsfml-graphics.so*" 2>/dev/null
                            </code-block>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Graphics Issues" id="graphics-issues">
            <deflist>
                <def title="Problem">
                    <p>Window doesn't appear or graphics are corrupted</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Check OpenGL support:</p>
                            <code-block lang="bash">
                                glxinfo | grep "OpenGL version"
                                
                                # Install mesa-utils if needed
                                sudo apt install mesa-utils
                            </code-block>
                        </step>
                        <step>
                            <p>Update graphics drivers</p>
                        </step>
                        <step>
                            <p>Test with a simple SFML program</p>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Asset Loading Issues" id="asset-loading">
            <deflist>
                <def title="Problem">
                    <p>Images or fonts not loading properly</p>
                </def>
                
                <def title="Solutions">
                    <procedure>
                        <step>
                            <p>Verify file paths and working directory:</p>
                            <code-block lang="cpp">
                                #include &lt;iostream&gt;
                                #include &lt;filesystem&gt;
                                
                                std::cout &lt;&lt; "Current working directory: " 
                                          &lt;&lt; std::filesystem::current_path() &lt;&lt; std::endl;
                            </code-block>
                        </step>
                        <step>
                            <p>Use absolute paths for testing:</p>
                            <code-block lang="cpp">
                                if (!texture.loadFromFile("/full/path/to/image.png")) {
                                    std::cerr &lt;&lt; "Failed to load texture" &lt;&lt; std::endl;
                                }
                            </code-block>
                        </step>
                        <step>
                            <p>Check file permissions and formats</p>
                        </step>
                    </procedure>
                </def>
            </deflist>
        </chapter>
        
    </chapter>

    <chapter title="Platform-Specific Issues" id="platform-specific">
        
        <tabs>
            <tab title="Linux">
                <chapter title="Linux Issues" id="linux-issues">
                    <deflist>
                        <def title="X11 Display Issues">
                            <p>If running on a headless server or through SSH:</p>
                            <code-block lang="bash">
                                # Enable X11 forwarding
                                ssh -X username@hostname
                                
                                # Or use virtual display
                                export DISPLAY=:0
                            </code-block>
                        </def>
                        
                        <def title="Audio Issues">
                            <p>If SFML audio doesn't work:</p>
                            <code-block lang="bash">
                                # Install audio dependencies
                                sudo apt install libopenal-dev libvorbis-dev libflac-dev
                                
                                # Check audio system
                                pactl info
                            </code-block>
                        </def>
                    </deflist>
                </chapter>
            </tab>
            
            <tab title="macOS">
                <chapter title="macOS Issues" id="macos-issues">
                    <deflist>
                        <def title="Xcode Command Line Tools">
                            <p>If compiler is not found:</p>
                            <code-block lang="bash">
                                # Install or update Xcode Command Line Tools
                                xcode-select --install
                                
                                # Reset if needed
                                sudo xcode-select --reset
                            </code-block>
                        </def>
                        
                        <def title="Homebrew Path Issues">
                            <p>If SFML installed via Homebrew is not found:</p>
                            <code-block lang="bash">
                                # Add Homebrew to PATH
                                echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc
                                source ~/.zshrc
                                
                                # Or use full path
                                /opt/homebrew/bin/g++ -o game main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </def>
                    </deflist>
                </chapter>
            </tab>
            
            <tab title="Windows">
                <chapter title="Windows Issues" id="windows-issues">
                    <deflist>
                        <def title="DLL Not Found">
                            <p>If application fails to start due to missing DLLs:</p>
                            <procedure>
                                <step>Copy SFML DLLs to executable directory</step>
                                <step>Add SFML bin directory to system PATH</step>
                                <step>Use static linking (add -static flag)</step>
                            </procedure>
                        </def>
                        
                        <def title="MinGW Path Issues">
                            <p>If using MinGW and compiler is not found:</p>
                            <code-block lang="bash">
                                # Add MinGW to PATH
                                set PATH=C:\msys64\mingw64\bin;%PATH%
                                
                                # Or use full path
                                C:\msys64\mingw64\bin\g++.exe -o game.exe main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            </code-block>
                        </def>
                    </deflist>
                </chapter>
            </tab>
        </tabs>
        
    </chapter>

    <chapter title="Performance Issues" id="performance-issues">
        
        <deflist>
            <def title="Slow Performance">
                <p>If games run slowly:</p>
                <procedure>
                    <step>Enable compiler optimizations: <code>g++ -O2</code></step>
                    <step>Check graphics drivers are updated</step>
                    <step>Verify OpenGL acceleration is working</step>
                    <step>Close other applications to free resources</step>
                </procedure>
            </def>
            
            <def title="High CPU Usage">
                <p>If games consume too much CPU:</p>
                <procedure>
                    <step>Check for infinite loops in game code</step>
                    <step>Implement proper frame rate limiting</step>
                    <step>Profile the application to find bottlenecks</step>
                </procedure>
            </def>
        </deflist>
        
    </chapter>

    <chapter title="Getting Help" id="getting-help">
        
        <chapter title="Diagnostic Commands" id="diagnostic-commands">
            <p>Run these commands to gather system information:</p>
            
            <code-block lang="bash">
                # System information
                uname -a
                lsb_release -a    # Linux distribution
                
                # Compiler information
                g++ --version
                clang --version
                
                # SFML information
                pkg-config --modversion sfml-all
                pkg-config --libs sfml-all
                pkg-config --cflags sfml-all
                
                # Library information
                ldconfig -p | grep sfml
                ldd /usr/lib/libsfml-graphics.so
                
                # Graphics information
                glxinfo | head -20
                
                # Current working directory and environment
                pwd
                echo $PATH
                echo $LD_LIBRARY_PATH
            </code-block>
        </chapter>
        
        <chapter title="Where to Get Help" id="where-to-get-help">
            <list>
                <li><strong>SFML Documentation:</strong> <a href="https://www.sfml-dev.org/documentation/">Official SFML Docs</a></li>
                <li><strong>SFML Forums:</strong> <a href="https://en.sfml-dev.org/forums/">SFML Community</a></li>
                <li><strong>Stack Overflow:</strong> Search for SFML-related questions</li>
                <li><strong>GitHub Issues:</strong> Check the project's issue tracker</li>
            </list>
        </chapter>
        
    </chapter>

    <chapter title="Next Steps" id="next-steps">
        <p>If you've resolved your setup issues:</p>
        <list>
            <li>Continue with <a href="compilation-guide.topic">compilation guide</a></li>
            <li>Start <a href="running-games.topic">running the games</a></li>
            <li>Explore the <a href="games-documentation.topic">games documentation</a></li>
        </list>
    </chapter>

</topic>