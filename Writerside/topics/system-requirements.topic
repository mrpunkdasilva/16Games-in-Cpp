<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="System Requirements" id="system-requirements">

    <p>
        Before setting up the development environment, ensure your system meets the minimum requirements 
        to compile and run the 16 classic games.
    </p>

    <chapter title="Hardware Requirements" id="hardware-requirements">
        <deflist>
            <def title="CPU">
                <p>Any modern CPU (x86_64 or ARM64)</p>
            </def>
            <def title="RAM">
                <p>Minimum: 2GB, Recommended: 4GB+</p>
            </def>
            <def title="Graphics">
                <p>OpenGL 1.1+ compatible graphics card</p>
            </def>
            <def title="Storage">
                <p>50MB for source code + 200MB for build tools</p>
            </def>
        </deflist>
    </chapter>

    <chapter title="Software Requirements" id="software-requirements">
        
        <chapter title="C++ Compiler" id="cpp-compiler">
            <p>You need a C++ compiler that supports C++11 or later:</p>
            
            <tabs>
                <tab title="Linux">
                    <list>
                        <li><strong>GCC 7.0+</strong> (recommended)</li>
                        <li><strong>Clang 5.0+</strong></li>
                    </list>
                    <code-block lang="bash">
                        # Check GCC version
                        gcc --version
                        
                        # Check Clang version
                        clang --version
                    </code-block>
                </tab>
                
                <tab title="macOS">
                    <list>
                        <li><strong>Xcode Command Line Tools</strong></li>
                        <li><strong>Clang</strong> (included with Xcode)</li>
                        <li><strong>GCC</strong> (via Homebrew)</li>
                    </list>
                    <code-block lang="bash">
                        # Install Xcode Command Line Tools
                        xcode-select --install
                        
                        # Check compiler
                        clang --version
                    </code-block>
                </tab>
                
                <tab title="Windows">
                    <list>
                        <li><strong>Visual Studio 2019+</strong> (recommended)</li>
                        <li><strong>MinGW-w64</strong></li>
                        <li><strong>MSYS2</strong> with GCC</li>
                    </list>
                    <code-block lang="bash">
                        # Check compiler (Command Prompt)
                        cl /help
                        
                        # Or for MinGW
                        gcc --version
                    </code-block>
                </tab>
            </tabs>
        </chapter>

        <chapter title="Build Tools" id="build-tools">
            <deflist>
                <def title="CMake (Optional)">
                    <p>Version 3.10 or later for automated builds</p>
                </def>
                <def title="Make">
                    <p>GNU Make or equivalent (usually included with compiler)</p>
                </def>
                <def title="Git">
                    <p>For cloning the repository</p>
                </def>
            </deflist>
        </chapter>

    </chapter>

    <chapter title="Installation Commands" id="installation-commands">
        
        <tabs>
            <tab title="Ubuntu/Debian">
                <code-block lang="bash">
                    # Install build essentials
                    sudo apt update
                    sudo apt install build-essential cmake git
                    
                    # Verify installation
                    gcc --version
                    cmake --version
                </code-block>
            </tab>
            
            <tab title="CentOS/RHEL/Fedora">
                <code-block lang="bash">
                    # For CentOS/RHEL
                    sudo yum groupinstall "Development Tools"
                    sudo yum install cmake git
                    
                    # For Fedora
                    sudo dnf groupinstall "Development Tools"
                    sudo dnf install cmake git
                </code-block>
            </tab>
            
            <tab title="macOS">
                <code-block lang="bash">
                    # Install Xcode Command Line Tools
                    xcode-select --install
                    
                    # Install Homebrew (if not already installed)
                    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                    
                    # Install CMake
                    brew install cmake git
                </code-block>
            </tab>
            
            <tab title="Windows">
                <p>For Windows, you have several options:</p>
                
                <procedure title="Option 1: Visual Studio" id="vs-install">
                    <step>Download and install Visual Studio Community (free)</step>
                    <step>Select C++ development workload during installation</step>
                    <step>Install Git for Windows</step>
                </procedure>
                
                <procedure title="Option 2: MSYS2" id="msys2-install">
                    <step>Download and install MSYS2 from https://www.msys2.org/</step>
                    <step>
                        <p>Open MSYS2 terminal and run:</p>
                        <code-block lang="bash">
                            pacman -S mingw-w64-x86_64-gcc
                            pacman -S mingw-w64-x86_64-cmake
                            pacman -S git
                        </code-block>
                    </step>
                </procedure>
            </tab>
        </tabs>
        
    </chapter>

    <chapter title="Verification" id="verification">
        <p>After installation, verify everything is working:</p>
        
        <procedure title="Test Your Setup" id="test-setup">
            <step>
                <p>Create a simple test file:</p>
                <code-block lang="cpp">
                    // test.cpp
                    #include &lt;iostream&gt;
                    
                    int main() {
                        std::cout &lt;&lt; "C++ setup is working!" &lt;&lt; std::endl;
                        return 0;
                    }
                </code-block>
            </step>
            <step>
                <p>Compile and run:</p>
                <code-block lang="bash">
                    g++ -o test test.cpp
                    ./test
                </code-block>
            </step>
            <step>
                <p>You should see: "C++ setup is working!"</p>
            </step>
        </procedure>
    </chapter>

    <chapter title="Next Steps" id="next-steps">
        <p>Once your system meets the requirements:</p>
        <list>
            <li>Proceed to <a href="sfml-installation.topic">SFML Installation</a></li>
            <li>Set up your <a href="ide-setup.topic">IDE or editor</a></li>
            <li>Learn about <a href="compilation-guide.topic">compilation</a></li>
        </list>
    </chapter>

</topic>