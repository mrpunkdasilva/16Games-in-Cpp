<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Compilation Guide" id="compilation-guide">

    <p>
        Step-by-step guide to compile individual games using direct compiler commands. 
        This method gives you full control over the compilation process.
    </p>

    <chapter title="Basic Compilation" id="basic-compilation">
        
        <chapter title="Simple Command" id="simple-command">
            <p>The most basic compilation command for any game:</p>
            
            <code-block lang="bash">
                g++ -o game_name main.cpp -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
            
            <p>Example for Tetris:</p>
            <code-block lang="bash">
                cd "01 Tetris"
                g++ -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                ./tetris
            </code-block>
        </chapter>
        
        <chapter title="With C++ Standard" id="with-standard">
            <p>Specify the C++ standard (recommended):</p>
            
            <code-block lang="bash">
                g++ -std=c++17 -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
        </chapter>
        
        <chapter title="With Optimizations" id="with-optimizations">
            <p>Add compiler optimizations for better performance:</p>
            
            <code-block lang="bash">
                g++ -std=c++17 -O2 -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
        </chapter>
        
    </chapter>

    <chapter title="Compiler Options Explained" id="compiler-options">
        
        <deflist>
            <def title="-std=c++17">
                <p>Specifies the C++ standard version. Options:</p>
                <list>
                    <li><code>-std=c++11</code> - Minimum required</li>
                    <li><code>-std=c++14</code> - Good compatibility</li>
                    <li><code>-std=c++17</code> - Recommended</li>
                    <li><code>-std=c++20</code> - Latest features</li>
                </list>
            </def>
            
            <def title="Optimization Flags">
                <p>Control compiler optimizations:</p>
                <list>
                    <li><code>-O0</code> - No optimization (debugging)</li>
                    <li><code>-O1</code> - Basic optimization</li>
                    <li><code>-O2</code> - Recommended optimization</li>
                    <li><code>-O3</code> - Aggressive optimization</li>
                    <li><code>-Os</code> - Optimize for size</li>
                </list>
            </def>
            
            <def title="Warning Flags">
                <p>Enable compiler warnings:</p>
                <list>
                    <li><code>-Wall</code> - Enable common warnings</li>
                    <li><code>-Wextra</code> - Additional warnings</li>
                    <li><code>-Werror</code> - Treat warnings as errors</li>
                    <li><code>-pedantic</code> - Strict standard compliance</li>
                </list>
            </def>
            
            <def title="Debug Flags">
                <p>For debugging and development:</p>
                <list>
                    <li><code>-g</code> - Include debug symbols</li>
                    <li><code>-DDEBUG</code> - Define DEBUG macro</li>
                    <li><code>-fsanitize=address</code> - Address sanitizer</li>
                    <li><code>-fsanitize=undefined</code> - Undefined behavior sanitizer</li>
                </list>
            </def>
        </deflist>
        
    </chapter>

    <chapter title="SFML Library Linking" id="sfml-linking">
        
        <chapter title="Required Libraries" id="required-libraries">
            <p>Most games require these SFML modules:</p>
            
            <deflist>
                <def title="-lsfml-graphics">
                    <p>Graphics rendering, sprites, textures, shapes</p>
                </def>
                <def title="-lsfml-window">
                    <p>Window management, events, keyboard/mouse input</p>
                </def>
                <def title="-lsfml-system">
                    <p>Core functionality, threading, time, vectors</p>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Optional Libraries" id="optional-libraries">
            <p>Some games may also use:</p>
            
            <deflist>
                <def title="-lsfml-audio">
                    <p>Sound effects and music playback</p>
                </def>
                <def title="-lsfml-network">
                    <p>Network communication (multiplayer games)</p>
                </def>
            </deflist>
        </chapter>
        
        <chapter title="Library Order" id="library-order">
            <p>The order of libraries matters. Use this order:</p>
            
            <code-block lang="bash">
                # Correct order (most dependent first)
                g++ ... -lsfml-graphics -lsfml-audio -lsfml-window -lsfml-system
                
                # Not: -lsfml-system -lsfml-window -lsfml-graphics
            </code-block>
        </chapter>
        
    </chapter>

    <chapter title="Platform-Specific Compilation" id="platform-specific">
        
        <tabs>
            <tab title="Linux">
                <chapter title="Linux Compilation" id="linux-compilation">
                    <p>Standard compilation on Linux:</p>
                    
                    <code-block lang="bash">
                        # Basic compilation
                        g++ -std=c++17 -O2 -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                        
                        # With all warnings
                        g++ -std=c++17 -O2 -Wall -Wextra -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                        
                        # Debug build
                        g++ -std=c++17 -g -O0 -DDEBUG -o tetris_debug main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                    </code-block>
                    
                    <p>If SFML is installed in a custom location:</p>
                    <code-block lang="bash">
                        g++ -std=c++17 -I/usr/local/include -L/usr/local/lib -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                    </code-block>
                </chapter>
            </tab>
            
            <tab title="macOS">
                <chapter title="macOS Compilation" id="macos-compilation">
                    <p>Compilation on macOS (usually same as Linux):</p>
                    
                    <code-block lang="bash">
                        # Using Clang (default on macOS)
                        clang++ -std=c++17 -O2 -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                        
                        # Or using GCC if installed via Homebrew
                        g++-12 -std=c++17 -O2 -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                    </code-block>
                    
                    <p>If using Homebrew SFML:</p>
                    <code-block lang="bash">
                        # Intel Mac
                        clang++ -std=c++17 -I/usr/local/include -L/usr/local/lib -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                        
                        # Apple Silicon Mac
                        clang++ -std=c++17 -I/opt/homebrew/include -L/opt/homebrew/lib -o tetris main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                    </code-block>
                </chapter>
            </tab>
            
            <tab title="Windows">
                <chapter title="Windows Compilation" id="windows-compilation">
                    
                    <chapter title="MinGW/MSYS2" id="mingw-compilation">
                        <p>Using MinGW or MSYS2:</p>
                        
                        <code-block lang="bash">
                            # Basic compilation
                            g++ -std=c++17 -O2 -o tetris.exe main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                            
                            # Static linking (to avoid DLL dependencies)
                            g++ -std=c++17 -O2 -static -o tetris.exe main.cpp -lsfml-graphics-Writerside -lsfml-window-Writerside -lsfml-system-Writerside
                        </code-block>
                        
                        <p>With explicit paths:</p>
                        <code-block lang="bash">
                            g++ -std=c++17 -IC:\SFML\include -LC:\SFML\lib -o tetris.exe main.cpp -lsfml-graphics -lsfml-window -lsfml-system
                        </code-block>
                    </chapter>
                    
                    <chapter title="Visual Studio Command Line" id="vs-command-line">
                        <p>Using Visual Studio compiler (cl.exe):</p>
                        
                        <code-block lang="bash">
                            cl /EHsc /std:c++17 /IC:\SFML\include main.cpp /link /LIBPATH:C:\SFML\lib sfml-graphics.lib sfml-window.lib sfml-system.lib
                        </code-block>
                    </chapter>
                    
                </chapter>
            </tab>
        </tabs>
        
    </chapter>

    <chapter title="Complete Examples" id="complete-examples">
        
        <chapter title="Production Build" id="production-build">
            <p>Optimized build for distribution:</p>
            
            <code-block lang="bash">
                g++ -std=c++17 \
                    -O3 -DNDEBUG \
                    -Wall -Wextra \
                    -march=native \
                    -o tetris main.cpp \
                    -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
        </chapter>
        
        <chapter title="Development Build" id="development-build">
            <p>Debug build for development:</p>
            
            <code-block lang="bash">
                g++ -std=c++17 \
                    -g -O0 -DDEBUG \
                    -Wall -Wextra -Wpedantic \
                    -fsanitize=address -fsanitize=undefined \
                    -o tetris_debug main.cpp \
                    -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
        </chapter>
        
        <chapter title="Profile Build" id="profile-build">
            <p>Build for profiling performance:</p>
            
            <code-block lang="bash">
                g++ -std=c++17 \
                    -O2 -g -pg \
                    -o tetris_profile main.cpp \
                    -lsfml-graphics -lsfml-window -lsfml-system
            </code-block>
        </chapter>
        
    </chapter>

    <chapter title="Compilation Scripts" id="compilation-scripts">
        
        <chapter title="Simple Build Script" id="simple-script">
            <p>Create <code>compile.sh</code> for easier compilation:</p>
            
            <code-block lang="bash">
                #!/bin/bash
                
                # Configuration
                GAME_NAME=${1:-"game"}
                SOURCE_FILE=${2:-"main.cpp"}
                CXX=${CXX:-g++}
                CXXFLAGS="-std=c++17 -O2 -Wall -Wextra"
                SFML_LIBS="-lsfml-graphics -lsfml-window -lsfml-system"
                
                echo "Compiling $GAME_NAME..."
                
                if $CXX $CXXFLAGS -o "$GAME_NAME" "$SOURCE_FILE" $SFML_LIBS; then
                    echo "✓ Compilation successful!"
                    echo "Run with: ./$GAME_NAME"
                else
                    echo "✗ Compilation failed!"
                    exit 1
                fi
            </code-block>
            
            <p>Usage:</p>
            <code-block lang="bash">
                chmod +x compile.sh
                ./compile.sh tetris main.cpp
            </code-block>
        </chapter>
        
        <chapter title="Advanced Build Script" id="advanced-script">
            <p>More sophisticated build script with options:</p>
            
            <code-block lang="bash">
                #!/bin/bash
                
                # Default values
                BUILD_TYPE="release"
                GAME_NAME=""
                SOURCE_DIR=""
                
                # Parse command line arguments
                while [[ $# -gt 0 ]]; do
                    case $1 in
                        -d|--debug)
                            BUILD_TYPE="debug"
                            shift
                            ;;
                        -r|--release)
                            BUILD_TYPE="release"
                            shift
                            ;;
                        -n|--name)
                            GAME_NAME="$2"
                            shift 2
                            ;;
                        -Writerside|--source)
                            SOURCE_DIR="$2"
                            shift 2
                            ;;
                        -h|--help)
                            echo "Usage: $0 [-d|--debug] [-r|--release] [-n|--name GAME_NAME] [-s|--source SOURCE_DIR]"
                            exit 0
                            ;;
                        *)
                            echo "Unknown option: $1"
                            exit 1
                            ;;
                    esac
                done
                
                # Set compiler flags based on build type
                if [[ $BUILD_TYPE == "debug" ]]; then
                    CXXFLAGS="-std=c++17 -g -O0 -DDEBUG -Wall -Wextra"
                    SUFFIX="_debug"
                else
                    CXXFLAGS="-std=c++17 -O2 -DNDEBUG -Wall"
                    SUFFIX=""
                fi
                
                SFML_LIBS="-lsfml-graphics -lsfml-window -lsfml-system"
                
                echo "Building $GAME_NAME ($BUILD_TYPE mode)..."
                
                cd "$SOURCE_DIR" || exit 1
                
                g++ $CXXFLAGS -o "../${GAME_NAME}${SUFFIX}" main.cpp $SFML_LIBS
                
                if [[ $? -eq 0 ]]; then
                    echo "✓ Build successful: ${GAME_NAME}${SUFFIX}"
                else
                    echo "✗ Build failed!"
                    exit 1
                fi
            </code-block>
        </chapter>
        
    </chapter>

    <chapter title="Troubleshooting Compilation" id="troubleshooting-compilation">
        
        <deflist>
            <def title="Command not found: g++">
                <p><strong>Solution:</strong> Install a C++ compiler</p>
                <code-block lang="bash">
                    # Ubuntu/Debian
                    sudo apt install build-essential
                    
                    # macOS
                    xcode-select --install
                    
                    # Windows
                    # Install MinGW or Visual Studio
                </code-block>
            </def>
            
            <def title="SFML headers not found">
                <p><strong>Solution:</strong> Install SFML development packages or add include path</p>
                <code-block lang="bash">
                    # Add include path
                    g++ -I/path/to/sfml/include ...
                    
                    # Or install dev packages
                    sudo apt install libsfml-dev
                </code-block>
            </def>
            
            <def title="SFML libraries not found">
                <p><strong>Solution:</strong> Add library path or install SFML libraries</p>
                <code-block lang="bash">
                    # Add library path
                    g++ -L/path/to/sfml/lib ...
                    
                    # Update library cache
                    sudo ldconfig
                </code-block>
            </def>
            
            <def title="Undefined references">
                <p><strong>Solution:</strong> Check library order and make sure all required libraries are linked</p>
                <code-block lang="bash">
                    # Correct order
                    g++ ... -lsfml-graphics -lsfml-window -lsfml-system
                </code-block>
            </def>
        </deflist>
        
    </chapter>

    <chapter title="Next Steps" id="next-steps">
        <p>After successful compilation:</p>
        <list>
            <li>Learn about <a href="running-games.topic">running the compiled games</a></li>
            <li>Set up <a href="cmake-setup.topic">CMake for automated builds</a></li>
            <li>Explore <a href="games-documentation.topic">individual game features</a></li>
        </list>
    </chapter>

</topic>